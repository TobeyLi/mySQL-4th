整个表的结构如下：
+---------+---------+---------------------+------------+-----------------------------------------------------------------------+
| prod_id | vend_id | prod_name           | prod_price | prod_desc                                                             |
+---------+---------+---------------------+------------+-----------------------------------------------------------------------+
| BNBG01  | DLL01   | Fish bean bag toy   |       3.49 | Fish bean bag toy, complete with bean bag worms with which to feed it |
| BNBG02  | DLL01   | Bird bean bag toy   |       3.49 | Bird bean bag toy, eggs are not included                              |
| BNBG03  | DLL01   | Rabbit bean bag toy |       3.49 | Rabbit bean bag toy, comes with bean bag carrots                      |
| BR01    | BRS01   | 8 inch teddy bear   |       5.99 | 8 inch teddy bear, comes with cap and jacket                          |
| BR02    | BRS01   | 12 inch teddy bear  |       8.99 | 12 inch teddy bear, comes with cap and jacket                         |
| BR03    | BRS01   | 18 inch teddy bear  |      11.99 | 18 inch teddy bear, comes with cap and jacket                         |
| RGAN01  | DLL01   | Raggedy Ann         |       4.99 | 18 inch Raggedy Ann doll                                              |
| RYL01   | FNG01   | King doll           |       9.49 | 12 inch king doll with royal garments and crown                       |
| RYL02   | FNG01   | Queen doll          |       9.49 | 12 inch queen doll with royal garments and crown                      |
+---------+---------+---------------------+------------+-----------------------------------------------------------------------+
1.检索单个列
	SELECT 列名 FROM 表名; 
	eg.	SELECT prod_name FROM Products;
2.检索多个列
	SELECT 列名1，列名2..... FROM 表名
	eg.	SELECT prod_name,prod_price FROM Products;
3.检索所有列
	SELECT * FROM 表名;
	eg.	SELECT * FROM Products;
	说明：* 表示的是通配符，如果给定通配符，则返回表中所有的列。但是往往情况是，你需要检索所有的列的话就最好不要用通配符，因为
	检索出不需要的列会降低检索性能和应用程序的性能。
4.检索不同的值
	关键字介绍：DISTINCT，就是指示数据库只返回不同的值，直接去修饰你所想要的不同的列名即可。
	如：SELECT vend_id FROM Products;	这条语句会把Products 里面具有vend_id 的列找出来，但是可能存在相同的情况，输出结果如下：
		+---------+
		| vend_id |
		+---------+
		| BRS01   |
		| BRS01   |
		| BRS01   |
		| DLL01   |
		| DLL01   |
		| DLL01   |
		| DLL01   |
		| FNG01   |
		| FNG01   |
		+---------+
	若采用DISTINCT 修饰，即SELECT DISTINCT vend_id FROM Products;则输出为：
		+---------+
		| vend_id |
		+---------+
		| BRS01   |
		| DLL01   |
		| FNG01   |
		+---------+
	小疑问解答：当DISTINCT作用于多列呢？-----》那么若两列的内容完全相同，则去重，若只有一个，则不去重。

5.限制输出的结果（按照要求输出多少行）
	关于LIMIT 和OFFSET 的用法
	SELECT prod_name FROM Products LIMIT 5;   ---->表示MySQL返回不超过5行的数据,从第0行数据开始。
	
	注意：第一个被检索的数据是第0行，而不是第1行。
	但是有时候我不需要从第0行数据开始，要从某个位置开始，那么就需要使用OFFSET关键字
	SELECT prod_name FROM Products LIMIT 5 OFFSET 2;   ---->从第二行开始（起始为0），输出不超过5行的记录（因为记录数可能没有5行）
	
	直观感受：
	 SELECT * FROM Products LIMIT 1;
	+---------+---------+-------------------+------------+-----------------------------------------------------------------------+
	| prod_id | vend_id | prod_name         | prod_price | prod_desc                                                             |
	+---------+---------+-------------------+------------+-----------------------------------------------------------------------+
	| BNBG01  | DLL01   | Fish bean bag toy |       3.49 | Fish bean bag toy, complete with bean bag worms with which to feed it |
	+---------+---------+-------------------+------------+-----------------------------------------------------------------------+
	SELECT * FROM Products LIMIT 1 OFFSET 1;
	+---------+---------+-------------------+------------+------------------------------------------+
	| prod_id | vend_id | prod_name         | prod_price | prod_desc                                |
	+---------+---------+-------------------+------------+------------------------------------------+
	| BNBG02  | DLL01   | Bird bean bag toy |       3.49 | Bird bean bag toy, eggs are not included |
	+---------+---------+-------------------+------------+------------------------------------------+
	
	关于LIMIT与OFFSET的归一用法：LIMIT 4 OFFSET 3 可以简化为 LIMIT 3,4  使用这个语法时，逗号之前的值对于OFFSET，逗号之后的值对应LIMIT

6.使用注释
	代码注释的作用：
	1）	如果SQL语句变得长起来，就需要添加注释，使得自己/他人在后面参考；
	2）	描述这个SQL文件的主体内容，以及对这个SQL的说明等等；
	3）	暂时停止要执行的SQL代码，如果碰到一个长的SQL语句，而只想测试它的一部分，那么就要注释一些代码，以便DBMS将其视为注释而忽略掉。
	代码注释的形式：
	1）	行内注释 (采用 --嵌在行内)
		SELECT prod_name    --这是一条注释
		FROM Products;
	2）	整行注释（在一行的开始的地方使用#，表示这一行都是注释）
		#	SELECT prod_name FROM Products;
	3）	多行注释（/*......*/）